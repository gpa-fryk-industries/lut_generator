import argparse
import math

HEADER = """
library ieee;

-- ACHTUNG! Do nitzen editchen! AUCHTUNG!
-- Autogenerated look up table package.
-- ACHTUNG! Do nitzen editchen! AUCHTUNG!

package {0}_pkg is
"""

OUTPUT = """
    -- {0}
    -- [{1} to {2}] = {3}
    constant {0}_lut : {6} := {4};
    constant {0}_len : integer := {5};   
"""

FOOTER = """
end {0}_pkg;

-- End of generated file
"""


class FileFormatter(object):
    HEADER = ""
    FOOTER = ""

    def __init__(self, _name, _args) -> None:
        super().__init__()
        self.args = _args
        self.name = _name

    def write_header(self, ofile):
        ofile.write(HEADER.format(self.args))

    def write_footer(self, ofile):
        ofile.write(FOOTER.format(self.args))

    def write_constant(self, ofile, generator):
        pass

    def write(self, ofile, outputs):
        self.write_header(ofile)


class VhdlPkgFormatter(FileFormatter):
    HEADER = """
    library ieee;

    -- Autogenerated package. Do not edit!

    package {name}_pkg is
    """

    FOOTER = """
    end {name}_pkg;

    -- End of generated file
    """

    def __init__(self, _name, _args) -> None:
        super().__init__(_name, _args)


class OutputGenerator(object):

    def __init__(self) -> None:
        super().__init__()


class OutputExpr(OutputGenerator):
    def __init__(self, args):
        super().__init__()

        name_n_expr = args.split('=')
        assert len(name_n_expr) == 2

        name_n_type = name_n_expr[0].split(':')
        self.name = name_n_type[0]
        if len(name_n_type) > 1:
            self.typ = name_n_type[1]
        else:
            self.typ = 'real'

        self.expr = name_n_expr[1]

    def calculate(self, input):
        return [eval(self.expr) for x in input]

    def __str__(self):
        return '{}:{}={}'.format(self.name, self.typ, self.expr)

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Create a VHDL look up table from formula')
    parser.add_argument('name', type=str,
                        help='Name of package/file')
    parser.add_argument("formula", nargs='+', type=str,
                        metavar="NAME(:TYPE)=EXPR",)
    parser.add_argument('--fr', '-f', type=int, default=1,
                        help='Start index')
    parser.add_argument('--to', '-t', type=int, default=100,
                        help='Stop index')

    args = parser.parse_args()
    print(args)

    try:

        with open(args.name + '.gen.vhd', "w") as ofile:
            ofile.write(HEADER.format(args.name, args.formula))

            for a in args.formula:
                c = OutputExpr(a)
                print(c)
                y = c.calculate(range(args.fr, args.to + 1))
                if len(y) == 1:
                    ys = '{}'.format(y[0])
                else:
                    ys = '(' + ',\n\t\t'.join('{}'.format(k) for k in y) + ')'
                ofile.write(OUTPUT.format(c.name, args.fr, args.to, c.expr, ys, len(y), c.typ))

            ofile.write(FOOTER.format(args.name))
    except SyntaxError as e:
        print('That is not valid python...', e)


# test --lut_expr "name:type=expr" --sym_header header.h



